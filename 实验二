模块1
#include<linux/init.h>
#include<linux/module.h>
#include<linux/kernel.h>
#include<linux/sched.h>
#include <linux/sched/signal.h>
static int __init ltmodule_1_init(void){
 struct task_struct *p;
 printk("Name\tPID\tState\tPrio\t\n"); 
 for_each_process(p)
 printk("%s\t%d\t%ld\t%d\n",p->comm,p->pid,p->state,p->prio); //输
出进程的名称,pid 号,状态,优先级
 return 0; }
static void __exit ltmodule_1_exit(void){
 printk("lt's module01 exit!\n"); 
}
module_init(ltmodule_1_init); 
module_exit(ltmodule_1_exit); 
MODULE_LICENSE("GPL");


makefile文件
obj-m := xfmodule_1.o
KDIR := /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)
default:
make -C $(KDIR) M=$(PWD) modules
clean:
make -C $(KDIR) M=$(PWD) clean


模块2
#include<linux/init.h>
#include<linux/module.h>
#include<linux/kernel.h>
#include<linux/sched.h> //有进程描述符 task_struct
#include<linux/moduleparam.h> //模块带参数
static int pid; //参数申明
module_param(pid,int,0644); //参数说明
static int __init ltmodule_2_init(void){
 struct task_struct *p;
 struct task_struct *parent;
 struct task_struct *process;
 struct list_head *list;
 
 printk("lt's Process Begin!\n");
 printk("与之关系\t\t\t 进程名\t\tPID\n");
 
 //根据 pid 找到进程的地址
 p=pid_task(find_vpid(pid),PIDTYPE_PID);
 printk("自己\t\t\t%s\t\t%d\n",p->comm,p->pid); //输出自己的信息
 
 parent=p->parent; //父进程
 printk("父进程\t\t\t%s\t\t%d\n",parent->comm,parent->pid);
 list= &parent->children;
 list_for_each(list,&parent->children) //遍历 parent 的 children，即是
他的兄弟
 { 
 process=list_entry(list,struct task_struct,sibling);
 printk("兄弟进程\t\t\t%s\t\t%d\n",process->comm,process->pid); 
 }
 list=&p->children; //子进程
 list_for_each(list,&p->children) //遍历子进程
 {
 process=list_entry(list,struct task_struct,sibling);
 printk("子进程\t\t\t%s\t\t%d\n",process->comm,process->pid); 
 }
 return 0; }
static void __exit ltmodule_2_exit(void){
 printk("lt's module_2_2 exit!\n");
}
module_init(ltmodule_2_init);
module_exit(ltmodule_2_exit);
MODULE_LICENSE("GPL");
模块二 Makefile 文件 
obj-m := xfmodule_2.o
 KDIR := /lib/modules/$(shell uname -r)/build
 PWD := $(shell pwd)
default:
 make -C $(KDIR) M=$(PWD) modules
clean: 
 make -C $(KDIR) M=$(PWD) clean
